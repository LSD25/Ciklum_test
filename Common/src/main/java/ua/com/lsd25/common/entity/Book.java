package ua.com.lsd25.common.entity;

import com.google.code.morphia.annotations.Entity;
import com.google.common.base.Objects;

/**
 * @author Victor Zagnitko on 31.03.2014.
 *         This entity describe Book
 */
@Entity(noClassnameStored = true)
public final class Book extends BasicEntity {

    private String name;

    private String author;

    private String description;

    private String pictureOfCover;

    /**
     *
     */
    public Book() {
        super();
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAuthor() {
        return this.author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getPictureOfCover() {
        return this.pictureOfCover;
    }

    public void setPictureOfCover(String pictureOfCover) {
        this.pictureOfCover = pictureOfCover;
    }

    /**
     * Determines whether two possibly-null objects are equal. Returns:
     * <p/>
     * <ul>
     * <li>{@code true} if {@code a} and {@code b} are both null.
     * <li>{@code true} if {@code a} and {@code b} are both non-null and they are
     * equal according to {@link Object#equals(Object)}.
     * <li>{@code false} in all other situations.
     * </ul>
     * <p/>
     * <p>This assumes that any non-null objects passed to this function conform
     * to the {@code equals()} contract.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Book newObj = (Book) obj;
        return Objects.equal(this.id, newObj.id)
                && Objects.equal(this.name, newObj.name)
                && Objects.equal(this.author, newObj.author)
                && Objects.equal(this.description, newObj.description)
                && Objects.equal(this.pictureOfCover, newObj.pictureOfCover);
    }

    /**
     * Generates a hash code for multiple values. The hash code is generated by
     * calling {@link java.util.Arrays#hashCode(Object[])}. Note that array arguments to
     * this method, with the exception of a single Object array, do not get any
     * special handling; their hash codes are based on identity and not contents.
     * <p/>
     * <p>This is useful for implementing {@link Object#hashCode()}. For example,
     * in an object that has three properties, {@code x}, {@code y}, and
     * {@code z}, one could write:
     * <pre>   {@code
     *   public int hashCode() {
     *     return Objects.hashCode(getX(), getY(), getZ());
     *   }}</pre>
     * <p/>
     * <p><b>Warning</b>: When a single object is supplied, the returned hash code
     * does not equal the hash code of that object.
     */
    @Override
    public int hashCode() {
        return Objects.hashCode(this.id,
                this.name,
                this.author,
                this.description,
                this.pictureOfCover);
    }

    /**
     * Method using Guava to provide String representation of this employee
     * instance.
     *
     * @return My String representation.
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this)
                .addValue(this.id)
                .addValue(this.name)
                .addValue(this.author)
                .addValue(this.description)
                .addValue(this.pictureOfCover)
                .toString();
    }

}
